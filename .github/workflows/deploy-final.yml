name: Deploy Final

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'Project ID'
        required: true
        type: string
      source_files:
        description: 'Source files JSON'
        required: true
        type: string
      build_config:
        description: 'Build config JSON'
        required: true
        type: string
      callback_url:
        description: 'Callback URL'
        required: true
        type: string
      callback_token:
        description: 'Callback token'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Create and build project
      id: build
      env:
        PROJECT_ID: ${{ inputs.project_id }}
      run: |
        echo "Creating project structure..."
        mkdir -p project/src
        cd project
        
        # Write source files using heredoc
        cat > source_files.json << 'EOF'
        ${{ inputs.source_files }}
        EOF
        
        cat > package.json << 'EOF'
        ${{ inputs.build_config }}
        EOF
        
        # Process files with Python
        python3 << 'PYTHON'
        import json
        import os
        
        with open('source_files.json', 'r') as f:
            files = json.load(f)
            
        for path, content in files.items():
            dir_name = os.path.dirname(path)
            if dir_name:
                os.makedirs(dir_name, exist_ok=True)
            with open(path, 'w') as f:
                f.write(content)
            print(f"Created: {path}")
        PYTHON
        
        # Install and build
        npm install
        npm run build
        
        echo "Build complete!"
        ls -la dist/
        
        # Set output for next steps
        echo "build_success=true" >> $GITHUB_OUTPUT
        
    - name: Upload to Cloudflare R2
      if: steps.build.outputs.build_success == 'true'
      env:
        R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
        R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
        R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        PROJECT_ID: ${{ inputs.project_id }}
      run: |
        echo "Installing AWS CLI..."
        pip install awscli
        
        echo "Configuring AWS CLI for R2..."
        aws configure set aws_access_key_id $R2_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $R2_SECRET_ACCESS_KEY
        aws configure set region auto
        
        # Create timestamp for unique build
        BUILD_TIMESTAMP=$(date +%s)
        echo "BUILD_TIMESTAMP=$BUILD_TIMESTAMP" >> $GITHUB_ENV
        
        echo "R2 Configuration:"
        echo "  Bucket: $R2_BUCKET_NAME"
        echo "  Account ID: $CLOUDFLARE_ACCOUNT_ID"
        echo "  Path: builds/$PROJECT_ID/$BUILD_TIMESTAMP/"
        
        # Check dist folder exists
        echo "Checking build output..."
        ls -la project/dist/
        
        # Upload dist folder to R2 - WITH proper authentication
        echo "Uploading to builds path..."
        aws s3 sync project/dist/ \
          s3://$R2_BUCKET_NAME/builds/$PROJECT_ID/$BUILD_TIMESTAMP/ \
          --endpoint-url https://$CLOUDFLARE_ACCOUNT_ID.r2.cloudflarestorage.com
        
        # Verify upload
        echo "Verifying upload..."
        aws s3 ls s3://$R2_BUCKET_NAME/builds/$PROJECT_ID/$BUILD_TIMESTAMP/ \
          --endpoint-url https://$CLOUDFLARE_ACCOUNT_ID.r2.cloudflarestorage.com \
          --recursive
        
        echo "Upload complete!"
        echo "r2_upload_success=true" >> $GITHUB_ENV
        
    - name: Send success callback
      if: steps.build.outputs.build_success == 'true'
      env:
        PROJECT_ID: ${{ inputs.project_id }}
        CALLBACK_URL: ${{ inputs.callback_url }}
        CALLBACK_TOKEN: ${{ inputs.callback_token }}
        R2_PUBLIC_URL: https://pub-39b5cb8eda96466d95d0bb7c5d4d44f8.r2.dev
      run: |
        DEPLOYMENT_URL="${R2_PUBLIC_URL}/sites/${PROJECT_ID}/index.html"
        BUILD_TS="${BUILD_TIMESTAMP:-$(date +%s)}"
        
        echo "Sending success callback..."
        echo "Deployment URL: $DEPLOYMENT_URL"
        echo "Project ID: $PROJECT_ID"
        
        # Generate run ID from workflow context
        GITHUB_RUN_ID="${{ github.run_id }}"
        GITHUB_RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${GITHUB_RUN_ID}"
        
        # Send callback with proper JSON
        CALLBACK_JSON=$(cat <<EOF
        {
          "project_id": "${PROJECT_ID}",
          "status": "success",
          "github_run_id": "${GITHUB_RUN_ID}",
          "github_run_url": "${GITHUB_RUN_URL}",
          "framework": "react",
          "node_version": "20",
          "r2_build_path": "builds/${PROJECT_ID}/${BUILD_TS}/",
          "r2_bucket_name": "${R2_BUCKET_NAME:-gpthost-builds-staging}",
          "public_url": "${DEPLOYMENT_URL}",
          "message": "Build and deployment successful"
        }
        EOF
        )
        
        echo "Callback JSON: $CALLBACK_JSON"
        
        curl -X POST "$CALLBACK_URL" \
          -H "Authorization: Bearer $CALLBACK_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$CALLBACK_JSON"
          
    - name: Send failure callback
      if: failure()
      run: |
        curl -X POST ${{ inputs.callback_url }} \
          -H "Authorization: Bearer ${{ inputs.callback_token }}" \
          -H "Content-Type: application/json" \
          -d '{
            "project_id": "${{ inputs.project_id }}",
            "status": "failure",
            "message": "Build or deployment failed"
          }'