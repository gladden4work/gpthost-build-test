name: GPTHost Build Pipeline (Debug)

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: Project ID
        required: true
        type: string
      source_files:
        description: JSON object of files (path -> content)
        required: true
        type: string
      callback_url:
        description: Worker v2 callback URL
        required: true
        type: string
      callback_token:
        description: Bearer token for callback
        required: true
        type: string
      framework:
        description: react|vue|svelte|plain (optional)
        required: false
        type: string
      build_command:
        description: Custom build command (optional, ignored by minimal flow)
        required: false
        type: string
      build_config:
        description: Optional build config JSON (ignored by minimal flow)
        required: false
        type: string
      correlation_id:
        description: Correlation ID for tracing (optional)
        required: false
        type: string

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Debug - Check Secrets
        run: |
          echo "=== Checking Secret Configuration ==="
          echo "CLOUDFLARE_ACCOUNT_ID is set: ${{ secrets.CLOUDFLARE_ACCOUNT_ID != '' }}"
          echo "R2_ACCESS_KEY_ID is set: ${{ secrets.R2_ACCESS_KEY_ID != '' }}"
          echo "R2_SECRET_ACCESS_KEY is set: ${{ secrets.R2_SECRET_ACCESS_KEY != '' }}"
          echo "R2_BUCKET_NAME is set: ${{ secrets.R2_BUCKET_NAME != '' }}"
          
          # Show first 8 chars of non-sensitive IDs for debugging
          if [ -n "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then
            echo "Account ID starts with: ${CLOUDFLARE_ACCOUNT_ID:0:8}..."
          fi
          if [ -n "${{ secrets.R2_BUCKET_NAME }}" ]; then
            echo "Bucket name: ${{ secrets.R2_BUCKET_NAME }}"
          fi

      - name: Install tools (jq, awscli)
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq unzip
          if ! command -v aws >/dev/null 2>&1; then
            curl -fsSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
            unzip -q awscliv2.zip
            sudo ./aws/install --update
          fi
          aws --version

      - name: Prepare workspace
        run: |
          set -euo pipefail
          mkdir -p "projects/${{ inputs.project_id }}/src"
          mkdir -p "projects/${{ inputs.project_id }}/public"
          mkdir -p "artifacts/${{ inputs.project_id }}"

      - name: Materialize source files
        working-directory: projects/${{ inputs.project_id }}
        env:
          SOURCE_FILES: ${{ inputs.source_files }}
        run: |
          set -euo pipefail
          echo "$SOURCE_FILES" > source.json
          jq -e . source.json >/dev/null
          jq -r 'to_entries[] | @base64' source.json | while read -r row; do
            key=$(echo "$row" | base64 --decode | jq -r '.key')
            content=$(echo "$row" | base64 --decode | jq -r '.value')
            key="${key#./}"
            case "$key" in
              *".."*) echo "Skipping unsafe path: $key" >&2; continue ;;
            esac
            case "$key" in
              public/*|src/*|index.html) target="$key" ;;
              *) target="src/$key" ;;
            esac
            mkdir -p "$(dirname "$target")"
            printf "%s" "$content" > "$target"
            echo "Created: $target"
          done
          if [ ! -f index.html ]; then
            printf '%s\n' \
              '<!DOCTYPE html>' \
              '<html lang="en">' \
              '  <head>' \
              '    <meta charset="UTF-8" />' \
              '    <meta name="viewport" content="width=device-width, initial-scale=1.0" />' \
              '    <title>GPTHost Minimal</title>' \
              '  </head>' \
              '  <body>' \
              '    <div id="root">GPTHost Minimal Build</div>' \
              '  </body>' \
              '</html>' > index.html
          fi

      - name: Minimal static build to dist/
        working-directory: projects/${{ inputs.project_id }}
        run: |
          set -euo pipefail
          rm -rf dist
          mkdir -p dist
          cp -f index.html dist/index.html
          if [ -d public ]; then cp -r public/. dist/; fi
          if [ -d src ]; then mkdir -p dist/src && cp -r src/. dist/src/; fi
          test -f dist/index.html
          echo "Build complete. Files in dist:"
          ls -la dist/

      - name: Prepare artifacts
        run: |
          set -euo pipefail
          cp -r "projects/${{ inputs.project_id }}/dist/." "artifacts/${{ inputs.project_id }}/"
          test -f "artifacts/${{ inputs.project_id }}/index.html"
          echo "Artifacts prepared. Files to upload:"
          ls -la "artifacts/${{ inputs.project_id }}/"

      - name: Test R2 Connection
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        run: |
          set +e  # Don't exit on error for this test
          echo "=== Testing R2 Connection ==="
          ENDPOINT="https://${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.r2.cloudflarestorage.com"
          
          echo "Testing bucket access..."
          aws s3 ls "s3://${{ secrets.R2_BUCKET_NAME }}/" \
            --endpoint-url "$ENDPOINT" \
            --region us-east-1 \
            --no-paginate \
            --max-items 1
          
          if [ $? -eq 0 ]; then
            echo "✅ R2 connection successful"
          else
            echo "❌ R2 connection failed. Attempting to list all buckets..."
            aws s3 ls --endpoint-url "$ENDPOINT" --region us-east-1
          fi
          set -e

      - name: Upload dist to R2 (AWS CLI with debug)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        run: |
          set -euo pipefail
          echo "=== Uploading to R2 ==="
          ENDPOINT="https://${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.r2.cloudflarestorage.com"
          SOURCE="artifacts/${{ inputs.project_id }}/"
          DEST="s3://${{ secrets.R2_BUCKET_NAME }}/builds/${{ inputs.project_id }}/dist/"
          
          echo "Source: $SOURCE"
          echo "Destination: $DEST"
          echo "Endpoint: $ENDPOINT"
          
          # Try upload with detailed output
          aws s3 cp "$SOURCE" "$DEST" \
            --recursive \
            --endpoint-url "$ENDPOINT" \
            --region us-east-1 \
            --no-progress \
            --debug 2>&1 | grep -E "(Uploading|Completed|Error|Exception)" || true
          
          # Verify upload
          echo ""
          echo "Verifying upload..."
          aws s3 ls "$DEST" \
            --endpoint-url "$ENDPOINT" \
            --region us-east-1 \
            --recursive
          
          echo "✅ Upload completed"

      - name: Upload dist to R2 (Action fallback)
        if: failure()
        uses: ryand56/r2-upload-action@v1
        continue-on-error: true
        with:
          r2-account-id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.R2_BUCKET_NAME }}
          source-dir: artifacts/${{ inputs.project_id }}/
          destination-dir: builds/${{ inputs.project_id }}/dist/

      - name: Success callback (auto-deploy)
        env:
          CALLBACK_URL: ${{ inputs.callback_url }}
          CALLBACK_TOKEN: ${{ inputs.callback_token }}
        run: |
          set -euo pipefail
          BODY=$(jq -n \
            --arg status "success" \
            --arg pid "${{ inputs.project_id }}" \
            --arg rid "${{ github.run_id }}" \
            --arg run_url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --arg r2_path "builds/${{ inputs.project_id }}/dist/" \
            '{status:$status, project_id:$pid, github_run_id:$rid, github_run_url:$run_url, r2_build_path:$r2_path}')
          
          echo "Sending callback to: $CALLBACK_URL"
          echo "Callback body: $BODY"
          
          curl -sS -X POST "$CALLBACK_URL" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CALLBACK_TOKEN" \
            -d "$BODY"

      - name: Failure callback
        if: failure()
        env:
          CALLBACK_URL: ${{ inputs.callback_url }}
          CALLBACK_TOKEN: ${{ inputs.callback_token }}
        run: |
          set -euo pipefail
          BODY=$(jq -n \
            --arg status "failure" \
            --arg pid "${{ inputs.project_id }}" \
            --arg rid "${{ github.run_id }}" \
            --arg run_url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --arg error "Check workflow logs for details" \
            '{status:$status, project_id:$pid, github_run_id:$rid, github_run_url:$run_url, error:$error}')
          
          curl -sS -X POST "$CALLBACK_URL" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CALLBACK_TOKEN" \
            -d "$BODY"
