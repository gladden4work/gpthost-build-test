name: GPTHost Build Pipeline (Worker Upload)
# This workflow builds projects and sends artifacts to Worker for R2 upload
# GitHub Actions cannot upload to R2 directly due to secret masking of account IDs

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: Project ID
        required: true
        type: string
      source_files:
        description: JSON object of files (path -> content)
        required: true
        type: string
      callback_url:
        description: Worker v2 callback URL
        required: true
        type: string
      callback_token:
        description: Bearer token for callback
        required: true
        type: string
      framework:
        description: react|vue|svelte|plain (optional)
        required: false
        type: string
      build_command:
        description: Custom build command (optional, ignored by minimal flow)
        required: false
        type: string
      build_config:
        description: Optional build config JSON (ignored by minimal flow)
        required: false
        type: string
      correlation_id:
        description: Correlation ID for tracing (optional)
        required: false
        type: string

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install tools (jq)
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Prepare workspace
        run: |
          set -euo pipefail
          mkdir -p "projects/${{ inputs.project_id }}/src"
          mkdir -p "projects/${{ inputs.project_id }}/public"
          mkdir -p "artifacts/${{ inputs.project_id }}"

      - name: Materialize source files
        working-directory: projects/${{ inputs.project_id }}
        env:
          SOURCE_FILES: ${{ inputs.source_files }}
        run: |
          set -euo pipefail
          echo "$SOURCE_FILES" > source.json
          jq -e . source.json >/dev/null
          jq -r 'to_entries[] | @base64' source.json | while read -r row; do
            key=$(echo "$row" | base64 --decode | jq -r '.key')
            content=$(echo "$row" | base64 --decode | jq -r '.value')
            key="${key#./}"
            case "$key" in
              *".."*) echo "Skipping unsafe path: $key" >&2; continue ;;
            esac
            case "$key" in
              public/*|src/*|index.html) target="$key" ;;
              *) target="src/$key" ;;
            esac
            mkdir -p "$(dirname "$target")"
            printf "%s" "$content" > "$target"
            echo "Created: $target"
          done
          if [ ! -f index.html ]; then
            printf '%s\n' \
              '<!DOCTYPE html>' \
              '<html lang="en">' \
              '  <head>' \
              '    <meta charset="UTF-8" />' \
              '    <meta name="viewport" content="width=device-width, initial-scale=1.0" />' \
              '    <title>GPTHost Minimal</title>' \
              '  </head>' \
              '  <body>' \
              '    <div id="root">GPTHost Minimal Build</div>' \
              '  </body>' \
              '</html>' > index.html
          fi

      - name: Minimal static build to dist/
        working-directory: projects/${{ inputs.project_id }}
        run: |
          set -euo pipefail
          rm -rf dist
          mkdir -p dist
          cp -f index.html dist/index.html
          if [ -d public ]; then cp -r public/. dist/; fi
          if [ -d src ]; then mkdir -p dist/src && cp -r src/. dist/src/; fi
          test -f dist/index.html

      - name: Prepare artifacts
        run: |
          set -euo pipefail
          cp -r "projects/${{ inputs.project_id }}/dist/." "artifacts/${{ inputs.project_id }}/"
          test -f "artifacts/${{ inputs.project_id }}/index.html"

      - name: Create tarball of build artifacts
        run: |
          set -euo pipefail
          echo "Creating tarball of build artifacts..."
          tar -czf "build-${{ inputs.project_id }}.tar.gz" -C artifacts "${{ inputs.project_id }}"
          ls -lh "build-${{ inputs.project_id }}.tar.gz"
          echo "ARTIFACT_SIZE=$(stat -c%s "build-${{ inputs.project_id }}.tar.gz")" >> $GITHUB_ENV

      - name: Upload artifacts to GitHub (for backup)
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ inputs.project_id }}
          path: artifacts/${{ inputs.project_id }}/
          retention-days: 1

      - name: Send build artifacts to Worker for R2 upload
        env:
          CALLBACK_URL: ${{ inputs.callback_url }}
          CALLBACK_TOKEN: ${{ inputs.callback_token }}
        run: |
          set -euo pipefail
          echo "Sending build artifacts to Worker for R2 upload..."
          echo "This bypasses GitHub's secret masking by handling R2 upload in Worker"
          
          # Create the tar.gz in memory and send directly to Worker
          # Worker will handle R2 upload using its environment bindings
          tar -czf - -C artifacts "${{ inputs.project_id }}" | \
          curl -sS -X POST "$CALLBACK_URL/upload" \
            -H "Authorization: Bearer $CALLBACK_TOKEN" \
            -H "X-Project-ID: ${{ inputs.project_id }}" \
            -H "X-GitHub-Run-ID: ${{ github.run_id }}" \
            -H "X-GitHub-Run-URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            -H "X-Correlation-ID: ${{ inputs.correlation_id }}" \
            -H "Content-Type: application/tar+gzip" \
            --data-binary @- \
            -o response.json
          
          # Check response from Worker
          if jq -e '.success' response.json > /dev/null; then
            echo "✅ Build artifacts successfully sent to Worker"
            echo "Worker will now handle R2 upload with native bindings"
            jq . response.json
          else
            echo "❌ Failed to send artifacts to Worker"
            jq . response.json
            exit 1
          fi

      - name: Failure callback
        if: failure()
        env:
          CALLBACK_URL: ${{ inputs.callback_url }}
          CALLBACK_TOKEN: ${{ inputs.callback_token }}
        run: |
          set -euo pipefail
          BODY=$(jq -n \
            --arg status "failure" \
            --arg pid "${{ inputs.project_id }}" \
            --arg rid "${{ github.run_id }}" \
            --arg run_url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            '{status:$status, project_id:$pid, github_run_id:$rid, github_run_url:$run_url}')
          curl -sS -X POST "$CALLBACK_URL" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $CALLBACK_TOKEN" \
            -d "$BODY"